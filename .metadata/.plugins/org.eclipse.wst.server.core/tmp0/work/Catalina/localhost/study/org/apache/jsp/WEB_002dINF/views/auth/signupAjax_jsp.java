/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.56
 * Generated at: 2022-04-15 20:31:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.auth;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class signupAjax_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write(" <!-- 얘는 페이지 지시자 -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- 위에 이걸로 jsp에서 if조건문이나 반복문을 처리할 것이다. -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>회원가입</title>\r\n");
      out.write("<script src=\"http://code.jquery.com/jquery-latest.min.js\"></script><!-- jquery 라이브러리를 사용한다는 코드 -->\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("회원가입 페이지\r\n");
      out.write(" \r\n");
      out.write(" <form action=\"/study/signup\" method=\"post\"> \r\n");
      out.write("<!-- <form action=\"/study/signup\" method=\"get\"> --> \r\n");
      out.write("<!-- type -> id -> class -> name -> 등등 순서대로 작성해라.  -->\r\n");
      out.write("	<!--  label = element, class= attribute, 아이디 = text-->\r\n");
      out.write("	<label class=\"ip-names\">아이디</label>\r\n");
      out.write("	<input type=\"text\" class=\"signup-ip\" name=\"username\"  required=\"required\">\r\n");
      out.write("	<button type=\"button\" id=\"id-check\" >중복확인</button></br>\r\n");
      out.write("	\r\n");
      out.write("	<label class=\"ip-names\">비밀번호</label> \r\n");
      out.write("	<input type=\"password\" class=\"signup-ip\" name=\"password\"   required=\"required\"></br>\r\n");
      out.write("	\r\n");
      out.write("	<label class=\"ip-names\">이름</label> \r\n");
      out.write("	<input type=\"text\" class=\"signup-ip\" name=\"name\"   required=\"required\"></br>\r\n");
      out.write("	\r\n");
      out.write("	<label class=\"ip-names\">이메일</label> \r\n");
      out.write("	<input type=\"email\" class=\"signup-ip\" name=\"email\"  required=\"required\"></br>\r\n");
      out.write("\r\n");
      out.write("</br>\r\n");
      out.write("<button type=\"button\" id=\"signup-btn\">가입하기</button>&nbsp&nbsp\r\n");
      out.write("<button type=\"reset\">재작성</button>\r\n");
      out.write("<!-- \r\n");
      out.write("\r\n");
      out.write("required=\"required\" : null 값이 허용되지 않는다. \r\n");
      out.write("필수 항복이라는 의미\r\n");
      out.write("submit이 안날라간다.\r\n");
      out.write("\r\n");
      out.write("지금 이것들은 GET방식으로 작성한 것\r\n");
      out.write("\r\n");
      out.write("GET : 주소창에 요청하는 것 (직접입력하는 것) // \r\n");
      out.write("http://localhost:8000/study/signup?username=abc&password=1234&name=fd&email=abc%40naver.com\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("POST : \r\n");
      out.write("\r\n");
      out.write("-->\r\n");
      out.write(" \r\n");
      out.write("</form>\r\n");
      out.write("\r\n");
      out.write("<div class=\"test-text\">안녕하세요</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- onclick=\"location.href='/study/signin 이런거 get방식 -->\r\n");
      out.write("<button type=\"button\" onclick=\"location.href='/study/signin' \">로그인</button>\r\n");
      out.write("<script src=\"/study/resources/signupAjax.js\"></script>\r\n");
      out.write("<!--\r\n");
      out.write(" Ajax : 비동기처리방식을 의미.\r\n");
      out.write("\r\n");
      out.write("소스코드는 순서대로 처리된다.\r\n");
      out.write("처리되다가 중간에 데이터를 불러와야하는 경우가 생긴다.\r\n");
      out.write("그 동안에 밑에꺼는 실행되지 않는다. 불러오는동안\r\n");
      out.write("비동기처리는 데이터 불러와야하는 시간이 오래 걸리는 것을 보류하고 띄어넘어서 밑에 코드를 실행하고\r\n");
      out.write("다 실행되면 실행되지 않은 부분을 마지막으로 처리한다.\r\n");
      out.write("\r\n");
      out.write("페이지에서 중복확인버튼을 클릭했을때, 요청이 POST로 날라간다. POST처리 되고 RESPONSE가 오면 \r\n");
      out.write("view reserver가 응답해줌\r\n");
      out.write("\r\n");
      out.write("비동기처리방식은 페이지를 다시 불러오는것이 아니라 저 부분 데이터만 전송을해서 데이터만 받아오는것(자바스크립트로 받을 것)\r\n");
      out.write("Ajax는 제이쿼리를 사용할 것\r\n");
      out.write("  -->\r\n");
      out.write("\r\n");
      out.write("<!-- button은 타입을 따로 주지 않으면 type=\"submit\" 이 기본값이다. -->\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
